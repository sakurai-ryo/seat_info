AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Stage:
    Description: Stage
    Type: String
    AllowedValues:
      - dev
      - stg
      - rls
  ProjectName:
    Type: String
    Default: SeatInfo
  VpcCidrBlock:
    Description: IPv4 CidrBlock
    Type: String
  AZa:
    Description: AZ
    Type: AWS::EC2::AvailabilityZone::Name
  AZb:
    Description: AZ
    Type: AWS::EC2::AvailabilityZone::Name
  MainPublicSubnetCidrBlock:
    Description: Public Subnet IPv4 CidrBlock
    Type: String
  SubPublicSubnetCidrBlock:
    Description: Public Subnet IPv4 CidrBlock
    Type: String
  HostZoneId:
    Type: String
    Default: Z02449942QK2DT09OIX89
  DomainName:
    Type: String
    Default: 10do-seat-info.com

Mappings:
  ALBAccountID:
    ap-northeast-1:
      ID: "582318560864"

Resources:
 # -------------------------------------
 # VPC
 # -------------------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags: 
        - Key: Stage
          Value: !Ref Stage

 # -------------------------------------
 # Subnet
 # -------------------------------------
  MainPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Ref AZa
      CidrBlock: !Ref MainPublicSubnetCidrBlock
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags: 
        - Key: Stage
          Value: !Ref Stage

  SubPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Ref AZb
      CidrBlock: !Ref SubPublicSubnetCidrBlock
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags: 
        - Key: Stage
          Value: !Ref Stage

 # -------------------------------------
 # VPC Flow Log
 # -------------------------------------

  VpcFlowLogsLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub ${Stage}-${ProjectName}-vpc-flowlogs
      RetentionInDays: 180

  VpcFlowLogsIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${Stage}-${ProjectName}-flowlogs-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "vpc-flow-logs.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub ${Stage}-${ProjectName}-flowlogs-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                Resource: !GetAtt VpcFlowLogsLogGroup.Arn

  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties: 
      DeliverLogsPermissionArn: !GetAtt VpcFlowLogsIamRole.Arn
      # LogDestination: String
      LogDestinationType: "cloud-watch-logs"
      # LogFormat: String
      LogGroupName: !Ref VpcFlowLogsLogGroup
      MaxAggregationInterval: 60
      ResourceId: !Ref VPC
      ResourceType: "VPC"
      TrafficType: "ALL"
      Tags: 
        - Key: Stage
          Value: !Ref Stage

 # -------------------------------------
 # Internet Gateway
 # -------------------------------------
  MainInternetGW:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: Stage
          Value: !Ref Stage

  MainVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref MainInternetGW
      VpcId: !Ref VPC

  # SubInternetGW:
  #   Type: AWS::EC2::InternetGateway
  #   Properties: 
  #     Tags: 
  #       - Key: Stage
  #         Value: !Ref Stage

  # SubVPCGatewayAttachment:
  #   Type: AWS::EC2::VPCGatewayAttachment
  #   Properties: 
  #     InternetGatewayId: !Ref SubInternetGW
  #     VpcId: !Ref VPC

 # -------------------------------------
 # Route Table
 # -------------------------------------
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
        - Key: Stage
          Value: !Ref Stage

  MainPublicRoute:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MainInternetGW
      RouteTableId: !Ref RouteTable

  MainSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref RouteTable
        SubnetId: !Ref MainPublicSubnet

  # SubPublicRoute:
  #   Type: AWS::EC2::Route
  #   Properties: 
  #     DestinationCidrBlock: 0.0.0.0/0
  #     GatewayId: !Ref MainInternetGW
  #     RouteTableId: !Ref RouteTable

  # SubSubnetRouteTableAssociation:
  #     Type: AWS::EC2::SubnetRouteTableAssociation
  #     Properties: 
  #       RouteTableId: !Ref RouteTable
  #       SubnetId: !Ref SubPublicSubnet

  # -------------------------------------
  # 外からのアクセスを許可するSG、ALBにアタッチ
  # -------------------------------------
  AllowFromWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub allow-from-web-for-${ProjectName}
      GroupDescription: Security group for the service
      VpcId: !Ref VPC
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub allow-from-web-for-${ProjectName}

  # -------------------------------------
  # ALBとFargateの通信を許可するSG
  # -------------------------------------
  FargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Stage}-${ProjectName}-fargate
      GroupDescription: Security group for the service
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt AllowFromWeb.GroupId # ALBからの通信のみ許可
          # GroupId: !GetAtt AllowFromWeb.GroupId
      Tags:
        - Key: Name
          Value: !Ref ProjectName

  ALBS3LogBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${Stage}-seat-info-alb-logs"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # 参考: https://docs.aws.amazon.com/ja_jp/elasticloadbalancing/latest/application/load-balancer-access-logs.html#enable-access-logging
  ALBS3LogPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref ALBS3LogBucket
      PolicyDocument:
        Id: !Sub "${Stage}-${ProjectName}-Alb-Bucket-Policy"
        Version: "2012-10-17"
        Statement:
          - Sid: ALBLogACL
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - "s3:GetBucketAcl"
            Resource: !GetAtt ALBS3LogBucket.Arn
          - Sid: ALBLogDelivery
            Effect: Allow
            Principal:
              AWS: 
                !Join
                  - ""
                  - - "arn:aws:iam::"
                    - !FindInMap
                      - ALBAccountID
                      - !Ref "AWS::Region"
                      - ID
                    - ":root"
            Action:
              - "s3:PutObject"
            Resource: 
              !Join
                - ""
                - - !GetAtt ALBS3LogBucket.Arn
                  - "/*"
          - Sid: ALBLogDeliveryService
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - "s3:PutObject"
            Resource:
              !Join
                - ""
                - - !GetAtt ALBS3LogBucket.Arn
                  - "/*"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Stage}-${ProjectName}-alb
      Scheme: internet-facing
      LoadBalancerAttributes: 
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value: !Ref ALBS3LogBucket
        - Key: access_logs.s3.prefix 
          Value: !Sub "${Stage}-seat-info-alb"
      Subnets: 
        - !Ref MainPublicSubnet 
        - !Ref SubPublicSubnet
      Type: application
      SecurityGroups:
        - !Ref FargateSecurityGroup
        - !Ref AllowFromWeb

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      DefaultActions: # この辺適当、503とかの方がいいかも
        - RedirectConfig:
            Host: '#{host}'
            Path: /#{path}
            Port: '443'
            Protocol: HTTPS
            Query: '#{query}'
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref LoadBalancer

  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref ACM
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Port: 443
      Protocol: HTTPS
      LoadBalancerArn: !Ref LoadBalancer

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 6
      HealthyThresholdCount: 3
      Name: !Sub ${Stage}-${ProjectName}-target-group
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      TargetType: ip
      VpcId: !Ref VPC

  HTTPListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
          Order: 1
      Conditions:
        - Field: path-pattern
          Values:
            - "*"
      ListenerArn: !Ref HttpListener
      Priority: 2

  HTTPsListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
          Order: 1
      Conditions:
        - Field: path-pattern
          Values:
            - "*"
      ListenerArn: !Ref HttpsListener
      Priority: 1

  # -------------------------------------
  # Route53
  # -------------------------------------
  DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Sub ${HostZoneId}
      Comment: "DNS for ALB"
      Name: !Sub ${DomainName}
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt 'LoadBalancer.CanonicalHostedZoneID'
        DNSName: !GetAtt 'LoadBalancer.DNSName'

  ACM:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub ${DomainName}
      DomainValidationOptions:
        - DomainName: !Sub ${DomainName}
          HostedZoneId: !Sub ${HostZoneId}
      ValidationMethod: DNS

Outputs:
  FargateSecurityGroupName:
    Value: !Ref FargateSecurityGroup
    Export:
      Name: !Sub "${Stage}-FargateSecurityGroupName"

  MainSubnetId:
    Value: !Ref MainPublicSubnet
    Export:
      Name: !Sub "${Stage}-MainPublicSubnetId"

  ALBArn:
    Value: !Ref LoadBalancer
    Export:
      Name: !Sub "${Stage}-ALBArn"

  TargetGroupArn:
    Value: !Ref TargetGroup
    Export:
      Name: !Sub "${Stage}-TargetGroupArn"