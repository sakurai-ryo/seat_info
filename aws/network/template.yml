AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Stage:
    Description: Stage
    Type: String
    AllowedValues:
      - dev
      - stg
      - rls
  ProjectName:
    Type: String
    Default: SeatInfo
  VpcCidrBlock:
    Description: IPv4 CidrBlock
    Type: String
  AZa:
    Description: AZ
    Type: AWS::EC2::AvailabilityZone::Name
  AZb:
    Description: AZ
    Type: AWS::EC2::AvailabilityZone::Name
  MainPublicSubnetCidrBlock:
    Description: Public Subnet IPv4 CidrBlock
    Type: String
  SubPublicSubnetCidrBlock:
    Description: Public Subnet IPv4 CidrBlock
    Type: String
 
Resources:
 # -------------------------------------
 # VPC
 # -------------------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags: 
        - Key: Stage
          Value: !Ref Stage

 # -------------------------------------
 # Internet Gateway
 # -------------------------------------
  InternetGW:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: Stage
          Value: !Ref Stage

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGW
      VpcId: !Ref VPC

 # -------------------------------------
 # Subnet
 # -------------------------------------
  MainPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Ref AZa
      CidrBlock: !Ref MainPublicSubnetCidrBlock
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags: 
        - Key: Stage
          Value: !Ref Stage

  SubPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Ref AZb
      CidrBlock: !Ref SubPublicSubnetCidrBlock
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags: 
        - Key: Stage
          Value: !Ref Stage

 # -------------------------------------
 # VPC Flow Log
 # -------------------------------------
  VpcFlowLogsLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub ${Stage}-${ProjectName}-vpc-flowlogs
      RetentionInDays: 180

  VpcFlowLogsIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${Stage}-${ProjectName}-flowlogs-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "vpc-flow-logs.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub ${Stage}-${ProjectName}-flowlogs-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                Resource: !GetAtt VpcFlowLogsLogGroup.Arn

  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties: 
      DeliverLogsPermissionArn: !GetAtt VpcFlowLogsIamRole.Arn
      # LogDestination: String
      LogDestinationType: "cloud-watch-logs"
      # LogFormat: String
      LogGroupName: !Ref VpcFlowLogsLogGroup
      MaxAggregationInterval: 60
      ResourceId: !Ref VPC
      ResourceType: "VPC"
      TrafficType: "ALL"
      Tags: 
        - Key: Stage
          Value: !Ref Stage

 # -------------------------------------
 # Route Table
 # -------------------------------------
  MainRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
        - Key: Stage
          Value: !Ref Stage

  SubRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags: 
        - Key: Stage
          Value: !Ref Stage

  MainPublicRoute:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGW
      RouteTableId: !Ref MainRouteTable

  MainSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref MainRouteTable
        SubnetId: !Ref MainPublicSubnet

  SubPublicRoute:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGW
      RouteTableId: !Ref SubRouteTable

  SubSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref SubRouteTable
        SubnetId: !Ref SubPublicSubnet

  # -------------------------------------
  # 外からのアクセスを許可するSG、ALBにアタッチ
  # -------------------------------------
  AllowFromWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub allow-from-web-for-${ProjectName}
      GroupDescription: Security group for the service
      VpcId: !Ref VPC
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub allow-from-web-for-${ProjectName}

  # AllowFromWebIngress:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: !Ref AllowFromWeb
  #     IpProtocol: -1 # -1だとtcp、udp、icmp、icmpv6の全部を指定する
  #     SourceSecurityGroupId: !Ref AllowFromWeb

  # -------------------------------------
  # LBとFargateの通信を許可するSG
  # -------------------------------------
  FargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub fargate-${ProjectName}
      GroupDescription: Security group for the service
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt AllowFromWeb.GroupId # ALBからの通信のみ許可
          # GroupId: !GetAtt AllowFromWeb.GroupId
      Tags:
        - Key: Name
          Value: !Ref ProjectName

  # SecurityGroupIngress:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: !Ref FargateSecurityGroup
  #     IpProtocol: -1 # -1だとtcp、udp、icmp、icmpv6の全部を指定する
  #     SourceSecurityGroupId: !Ref FargateSecurityGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ProjectName}-alb
      Scheme: internet-facing
      Subnets: 
        - !Ref MainPublicSubnet 
        - !Ref SubPublicSubnet
      Type: application
      SecurityGroups:
        - !Ref FargateSecurityGroup
        - !Ref AllowFromWeb

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            StatusCode: 503
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 6
      HealthyThresholdCount: 3
      Name: !Ref ProjectName
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      TargetType: ip
      VpcId: !Ref VPC
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "5" # デプロイ時間短縮のため
        # - Key: load_balancing.algorithm.type
        #   Value: least_outstanding_requests # とりあえずラウンドロビンでいいか

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
          Order: 1
      Conditions:
        - Field: path-pattern
          Values:
            - "*"
      ListenerArn: !Ref HttpListener
      Priority: 100

Outputs:
  FargateSecurityGroupName:
    Value: !Ref FargateSecurityGroup
    Export:
      Name: !Sub "${Stage}-FargateSecurityGroupName"

  MainSubnetId:
    Value: !Ref MainPublicSubnet
    Export:
      Name: !Sub "${Stage}-MainPublicSubnetId"

  SubSubnetId:
    Value: !Ref SubPublicSubnet
    Export:
      Name: !Sub "${Stage}-SubPublicSubnetId"

  ALBArn:
    Value: !Ref LoadBalancer
    Export:
      Name: !Sub "${Stage}-ALBArn"

  TargetGroupArn:
    Value: !Ref TargetGroup
    Export:
      Name: !Sub "${Stage}-TargetGroupArn"